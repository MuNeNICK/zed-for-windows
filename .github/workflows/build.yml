name: Build Zed Latest Release
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs every night at midnight UTC
  push:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_latest_tag.outputs.latest_tag }}
      proceed: ${{ steps.compare.outputs.proceed }}

    steps:
      - name: Get latest Zed release tag
        id: get_latest_tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latestTag=$(gh release list -R zed-industries/zed -L 10 --json tagName,isLatest -q '.[] | select(.isLatest == true) | select(.tagName | startswith("v")) | .tagName')
          echo "Latest Zed release tag: $latestTag"
          echo "latest_tag=$latestTag" >> $GITHUB_OUTPUT

      - name: Get our latest release name
        id: get_our_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          releases=$(gh release list -R vrichv/zed-win -L 10 --json tagName,isLatest -q '.[] | select(.isLatest == true) | select(.tagName | startswith("v")) | .tagName')
          echo "Our latest release: $releases"
          echo "OUR_LATEST_RELEASE=$releases" >> $GITHUB_ENV

      - name: Compare releases
        id: compare
        run: |
          if [ -z "${{ steps.get_latest_tag.outputs.latest_tag  }}" ] ||  [ "${{ env.OUR_LATEST_RELEASE }}" = "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Our latest release matches Zed's latest tag. Stopping workflow."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "Proceeding with build for Zed's latest tag: ${{ steps.get_latest_tag.outputs.latest_tag }}"
            echo "proceed=true" >> $GITHUB_OUTPUT

  build:
    needs: check
    runs-on: windows-latest
    if: needs.check.outputs.proceed == 'true'

    steps:
      - name: Checkout Zed repository
        uses: actions/checkout@v3
        with:
          repository: zed-industries/zed
          ref: ${{ needs.check.outputs.latest_tag }}
          fetch-depth: 1

      - name: Set up for build
        run: |
          echo "Ready to build ${{ needs.check.outputs.latest_tag }}"

      - name: Install rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: wasm32-wasi

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: zed-release
          path: target/release/zed.exe

      - name: Zip non-installer release
        run: |
          zip zed-${{ needs.check.outputs.latest_tag }}.zip target/release/zed.exe
        uses: actions/upload-artifact@v4
        with:
          name: zed-zip
          path: zed-${{ needs.check.outputs.latest_tag }}.zip

  create_installer:
    needs: build
    runs-on: windows-latest
    if: needs.check.outputs.proceed == 'true'

    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3

      - name: Download Zed build artifact
        uses: actions/download-artifact@v4
        with:
          name: zed-release
          path: zed-release

      - name: Install NSIS
        run: |
          choco install nsis -y

      - name: Create NSIS script dynamically
        run: |
          echo 'Name "Zed Installer"' > installer.nsi
          echo 'OutFile "ZedInstaller-${{ needs.check.outputs.latest_tag }}.exe"' >> installer.nsi
          echo 'InstallDir "$PROGRAMFILES\\Zed"' >> installer.nsi
          echo 'Page directory' >> installer.nsi
          echo 'Page instfiles' >> installer.nsi
          echo 'Section "MainSection" SEC01' >> installer.nsi
          echo '  SetOutPath "$INSTDIR"' >> installer.nsi
          echo '  File "zed-release\\zed.exe"' >> installer.nsi
          echo '  WriteUninstaller "$INSTDIR\\uninstall.exe"' >> installer.nsi

          # Create Start Menu Shortcut
          echo '  CreateShortCut "$SMPROGRAMS\\Zed.lnk" "$INSTDIR\\zed.exe"' >> installer.nsi
          # Create Desktop Shortcut
          echo '  CreateShortCut "$DESKTOP\\Zed.lnk" "$INSTDIR\\zed.exe"' >> installer.nsi
          
          # Add Explorer "Zed" Open Option
          echo '  WriteRegStr HKCR "Directory\\shell\\Zed" "" "Open with Zed"' >> installer.nsi
          echo '  WriteRegStr HKCR "Directory\\shell\\Zed\\command" "" "$INSTDIR\\zed.exe %1"' >> installer.nsi

          echo 'SectionEnd' >> installer.nsi
          
          echo 'Section "Uninstall"' >> installer.nsi
          echo '  Delete "$INSTDIR\\zed.exe"' >> installer.nsi
          echo '  Delete "$INSTDIR\\uninstall.exe"' >> installer.nsi
          echo '  RMDir "$INSTDIR"' >> installer.nsi
          echo '  DeleteRegKey HKCR "Directory\\shell\\Zed"' >> installer.nsi
          echo 'SectionEnd' >> installer.nsi

      - name: Build NSIS Installer
        run: |
          makensis installer.nsi

      - name: Archive NSIS Installer
        uses: actions/upload-artifact@v4
        with:
          name: zed-installer
          path: ZedInstaller-${{ needs.check.outputs.latest_tag }}.exe

  release:
    needs: [check, build, create_installer]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.check.outputs.proceed == 'true'

    steps:
      - name: Download NSIS Installer
        uses: actions/download-artifact@v4
        with:
          name: zed-installer
          path: zed-installer

      - name: Download non-installer zip
        uses: actions/download-artifact@v4
        with:
          name: zed-zip
          path: zed-zip

      - name: Upload both release artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.check.outputs.latest_tag }}
          tag_name: ${{ needs.check.outputs.latest_tag }}
          draft: false
          make_latest: true
          files: |
            ZedInstaller-${{ needs.check.outputs.latest_tag }}.exe
            zed-${{ needs.check.outputs.latest_tag }}.zip
