name: Build Zed Nightly

on:
  schedule:
    - cron: "0 0 * * *" # Runs every night at midnight UTC
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: zed-industries/zed
          ref: main
          fetch-depth: 0

      - name: Get latest v* tag on main
        id: get_latest_tag
        run: |
          git fetch --tags
          $latestTag = git describe --tags --abbrev=0 --match "v*" --first-parent main
          echo "Latest tag on main: $latestTag"
          echo "LATEST_TAG=$latestTag" >> $env:GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          if (gh release view ${{ env.LATEST_TAG }} 2>&1 | Out-Null) {
            echo "RELEASE_EXISTS=true" >> $env:GITHUB_ENV
          } else {
            echo "RELEASE_EXISTS=false" >> $env:GITHUB_ENV
          }

      - name: Skip if release exists
        if: env.RELEASE_EXISTS == 'true'
        run: |
          echo "Release for ${{ env.LATEST_TAG }} already exists. Skipping build."
          exit 0
          
      - name: Checkout latest tag
        run: git checkout ${{ env.LATEST_TAG }}
        
      - name: Install rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: wasm32-wasi

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: zed-release
          path: target/release/zed.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: zed-release
          path: zed-release

      - name: Zip the release artifact
        run: zip -r zed-windows.zip zed-release/*

      - name: Upload release build artifact to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.LATEST_TAG }}
          tag_name: ${{ env.LATEST_TAG }}
          draft: false
          make_latest: true
          files: zed-windows.zip
